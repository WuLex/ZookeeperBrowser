@{
    ViewBag.Title = "Manager";
    Layout = "/Views/Shared/_LayoutTwo.cshtml";
}

<style>
    #test1 *,
    #test2 *,
    #test4 *,
    #test5 *,
    #test7 *,
    #test9 *,
    #test12 *,
    #test13 * {
        -webkit-box-sizing: content-box;
        -moz-box-sizing: content-box;
        box-sizing: content-box
    }

    /*layui-table 表格内容允许换行*/

    .layui-table-cell {
        height: auto;
        text-overflow: inherit;
        white-space: normal;
    }
</style>
<link href="~/lib/zTreev3/css/metroStyle/metroStyle.css" rel="stylesheet"/>

<div class="layui-btn-container">
    @* <button type="button" class="layui-btn layui-btn-sm" lay-demo="getChecked">获取选中节点数据</button>
        <button type="button" class="layui-btn layui-btn-sm" lay-demo="setChecked">勾选指定节点</button>
        <button type="button" class="layui-btn layui-btn-sm" lay-demo="reload">重载实例</button>*@
</div>
<div class="layui-container">
    <div class="layui-row layui-col-space30">
        margin-top
        <div class="layui-col-lg12 layui-col-md12 layui-header" style="text-align: center; margin-top: 30px;">
            <h1>Zookeeper简单管理工具</h1>
        </div>

        <div class="layui-col-lg2 layui-col-md2">
            <blockquote class="layui-elem-quote title">Zookeeper节点</blockquote>

            @* <fieldset class="layui-elem-field layui-field-title" style="margin-top: 30px;">
                <legend>Layui用法(Zookeeper加载一级节点)</legend>
                </fieldset>
                <div id="zookeepertest" class="demo-tree demo-tree-box"></div>*@
            @* <div class="">
                <h2>zookeeper</h2>
                </div>*@

            @* ztree用法*@
            <div class="" style="height: 500px">
                <ul id="zookeepertree" class="ztree"></ul>
            </div>
            @* ztree用法*@
            @*<div class="layui-fluid layui-col-xs2">
                <div class="layui-card">
                <div class="layui-form layui-card-header layuiadmin-card-header-auto">
                <h2>zookeeper</h2>
                </div>
                <div class="layui-form layui-card-header layuiadmin-card-header-auto" style="height:850px">
                <ul id="zookeepertree" class="ztree"></ul>
                </div>
                </div>
                </div>*@
        </div>
        <div class="layui-col-lg10 layui-col-md10">

            <form class="layui-form layui-form-pane" action="">
                <div class="layui-form-item layui-form-text">
                    <label class="layui-form-label">Data值</label>
                    <div class="layui-input-block">
                        <textarea placeholder="" readonly="readonly" id="zkdata" class="layui-textarea"></textarea>
                    </div>
                </div>
                <button type="button" class="layui-btn" lay-crud="delete" id="btnDelete">删除节点</button>

            </form>


            <blockquote class="layui-elem-quote" style="margin-top: 20px;">
                状态信息表格
            </blockquote>
            <table id="zktable" lay-filter="tabledemo">

            </table>

        </div>
    </div>
    <hr/>
</div>

<script src="~/lib/layui/layui.js" charset="utf-8"></script>
<script src="~/lib/zTreev3/js/jquery.ztree.core.js"></script>
<script src="~/lib/zTreev3/js/jquery.ztree.excheck.js"></script>
<script src="~/lib/zTreev3/js/jquery.ztree.exhide.js"></script>
<script src="~/lib/zTreev3/js/jquery.ztree.all.js"></script>

<script>
    var setting = { //树设置
        //treeId: "",  //zTree 的唯一标识，初始化后，等于 用户定义的 zTree 容器的 id 属性值。

        //区划树设置
        async: {
            enable: true, //开启异步加载处理
            url: "/Zookeeper/GetZTreeData",
            autoParam: ["id", "level"],
            type: "post"
            //dataFilter: filter//用于对 Ajax 返回数据进行预处理的函数
        },
        edit: {
            enable: false, //true / false 分别表示 可以 / 不可以 编辑
            showRemoveBtn: false, //true / false 分别表示 显示 / 隐藏 删除按钮
            drag: {
                isCopy: true, //是否可复制
                isMove: false, //是否可移动
                prev: false, //拖拽到目标节点时，设置是否允许移动到目标节点前面的操作
                next: false, //拖拽到目标节点时，设置是否允许移动到目标节点后面的操作
                inner: false //拖拽到目标节点时，设置是否允许成为目标节点的子节点。
            }
        },
        data: {
            key: {
                leaf: false,
                //zTree 的节点叶子节点属性锁，是否始终保持 isParent = false
                //默认值：false 如果设置为 true，则所有 isParent = false 的节点，都无法添加子节点。
                //children: "sub",
                //isParent: "isParent", //是否为父节点，false显示文件图标！
                //title: "name"
            },
            simpleData: {
                //是否使用简单模式
                //如果设置为 true，请务必设置 setting.data.simpleData 内的其他参数: idKey /  pIdKey / rootPId，并且让数据满足父子关系。
                enable: true,
                idKey: "id", // 唯一标识的属性名称
                pIdKey: "parentId", // 父节点唯一标识的属性名称
                //rootPId: "/"
            }

        },
        callback: {
            onExpand: onExpandIdentValueTree, //节点被展开的事件回调函数

            onClick: identValueOnClick, //节点被点击的事件回调函数

        },

        view: {
            showIcon: true, //设置 zTree 是否显示节点的图标。
            showLine: true //设置 zTree 是否显示节点的连线。
        }

    }

    //1. 每次展开节点后， 弹出该节点的 tId、name 的信息
    function onExpandIdentValueTree(event, treeId, treeNode) {
        //alert("onExpandIdentValueTree=" + treeNode.tId + ", " + treeNode.name);
    };

    // 每次点击节点后， 弹出该节点的 tId、name 的信息
    function identValueOnClick(event, treeId, treeNode) {

        layui.use('table',
            function() {
                var table = layui.table;
                table.render({
                    elem: '#zktable',
                    method: "post",
                    loading: true,
                    url: '/Zookeeper/GetDataViewModel',
                    cellMinWidth: 80 //全局定义常规单元格的最小宽度，layui 2.2.1 新增
                    ,
                    contentType: 'application/json',
                    where: { nodepath: treeNode.id },
                    parseData: function(res) { //res 即为原始返回的数据

                        $("#zkdata").text(res.data[0].data);

                        return {
                            "code": res.code, //解析接口状态
                            "msg": res.msg, //解析提示文本
                            "count": res.count, //解析数据长度
                            "data": res.data //解析数据列表
                        };
                    },
                    cols: [
                        [
                            { field: 'version', title: 'version' }, { field: 'pzxid', title: 'pzxid' }, { field: 'numChildren', title: 'numChildren', width: 180 }, { field: 'mzxid', title: 'mzxid' }, { field: 'mtime', title: 'mtime', width: 180 }, { field: 'ephemeralOwner', title: 'ephemeralOwner', width: 180 }, { field: 'dataLength', title: 'dataLength', width: 180 }, { field: 'czxid', title: 'czxid' }, { field: 'cversion', title: 'cversion' }, { field: 'ctime', title: 'ctime', width: 180 }, { field: 'aversion', title: 'aversion', width: 180 }
                        ]
                    ]
                });
            });

        //alert("identValueOnClick=" + treeNode.tId + ", " + treeNode.name);
        // $.ajax({
        //   type: "post",        // 请求方式
        //   url: "/Zookeeper/GetDataViewModel", // 请求路径
        //   data:{nodepath:treeNode.id},
        //   dataType: "json",   // 预期返回一个 json 类型数据
        //   success: function (nodeinfo) {   // nodedata是形参名，代表返回的数据
        //       //console.log(nodeinfo);
        //       $("#zkdata").text(nodeinfo.data);

        //       $("#zktable tbody").empty();
        //       $.each(nodeinfo,function(name,value) {
        //            if(name!="data")
        //            { 
        //                $("#zktable tbody").prepend('<tr><td>'+name+'</td><td>'+value+'</td></tr>');
        //            }
        //       });
        //   }
        //});
    };

    function filter(treeId, parentNode, childNodes) {
        if (!childNodes) return null;
        for (var i = 0, l = childNodes.length; i < l; i++) {
            childNodes[i].name = childNodes[i].name.replace(/\.n/g, '.');
        }
        return childNodes;
    }

    $(document).ready(function() {
        zTree = $.fn.zTree.init($("#zookeepertree"), setting,);
    });
</script>

<script src="~/js/jsondata.js" charset="utf-8"></script>
<script>
    layui.use(['tree', 'util'],
        function() {
            var tree = layui.tree,
                layer = layui.layer,
                util = layui.util;

            //按钮事件
            util.event('lay-demo',
                {
                    getChecked: function(othis) {
                        //var checkedData = tree.getChecked('demoId1'); //获取选中节点的数据

                        //layer.alert(JSON.stringify(checkedData), { shade: 0 });
                        //console.log(checkedData);
                    },
                    setChecked: function() {
                        //tree.setChecked('demoId1', [12, 16]); //勾选指定节点
                    },
                    reload: function() {
                        //重载实例
                        //tree.reload('demoId1',
                        //    {
                        //    });

                    }
                });

            //按钮事件
            util.event('lay-crud',
                {
                    delete: function(othis) {
                        var treeObj = $.fn.zTree.getZTreeObj("zookeepertree");
                        //获取选中节点
                        var nodes = treeObj.getSelectedNodes();
                        if (nodes != undefined && nodes.length > 0) {
                            var queryobj = {
                                nodepath: nodes[0].id
                            };
                            $.ajax({
                                type: "POST",
                                url: "/Zookeeper/DeleteNode",
                                data: JSON.stringify(queryobj),
                                contentType: "application/json; charset=utf-8"
                            }).done(function(data) {
                                if (data) {
                                    layer.alert("删除成功");
                                } else {
                                    layer.alert("后台删除失败");
                                }

                            }).fail(function(XMLHttpRequest, status, e) {
                                layer.alert("后台异常,删除失败");
                            });
                        } else {
                            layer.alert("请选中一个节点");
                        }

                    },
                    create: function() {
                    },
                    update: function() {
                    }
                });


            $.get('/Zookeeper/GetLayuiTreeData',
                function(data) {
                    //基本演示
                    //tree.render({
                    //    elem: '#test12'
                    //    , data: data
                    //    , showCheckbox: true  //是否显示复选框
                    //    , id: 'demoId1'
                    //    , isJump: true //是否允许点击节点时弹出新窗口跳转
                    //    , click: function (obj) {
                    //        var data = obj.data;  //获取当前点击的节点数据
                    //        layer.msg('状态：' + obj.state + '<br>节点数据：' + JSON.stringify(data));
                    //    }
                    //});

                    //常规用法
                    tree.render({
                        elem: '#zookeepertest' //默认是点击节点可进行收缩
                        ,
                        data: data
                    });

                });

        });
</script>